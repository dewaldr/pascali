// RMS for AC current sensor
const int currentPin = 4;
// sample over 100ms, it is an exact number of cycles for both 50Hz and 60Hz mains
const unsigned long sampleTime = 100000UL;
// choose the number of samples to divide sampleTime exactly, but low enough for the ADC to keep up
const unsigned long numSamples = 250UL;
// the sampling interval, must be longer than then ADC conversion time
const unsigned long sampleInterval = sampleTime/numSamples;
//autoadjusted relative digital zero
int adc_zero = 0;

int determineVQ(const int pin) {
    Serial.print("estimating avg. quiscent voltage:");
    long VQ = 0;
    //read 5000 samples to stabilise value
    for (int i = 0; i < 5000; i++) {
        VQ += analogRead(pin);
        delay(1);//depends on sampling (on filter capacitor), can be 1/80000 (80kHz) max.
    }
    VQ /= 5000;
    Serial.print(map(VQ, 0, 1023, 0, 5000));Serial.println(" mV");

    return int(VQ);
}

float readCurrent(const int pin)
{
    unsigned long currentAcc = 0;
    unsigned int count = 0;
    unsigned long prevMicros = micros() - sampleInterval ;

    while (count < numSamples)
    {
        if (micros() - prevMicros >= sampleInterval)
        {
            int adc_raw = analogRead(pin) - adc_zero;
            currentAcc += (unsigned long)(adc_raw * adc_raw);
            ++count;
            prevMicros += sampleInterval;
        }
    }
    float rms = sqrt((float)currentAcc/(float)numSamples) * (75.7576 / 1024.0);
    return rms;
}

void setup()
{
    Serial.begin(9600);
    //Quiscent output voltage - the average voltage ACS712 shows with no load (0 A)
    adc_zero = determineVQ(currentPin);
    delay(1000);
}

void loop(){
    Serial.print("ACS712@A2:");
    Serial.print(readCurrent(currentPin),3);
    Serial.println(" mA");
    delay(150);
}

